import re
import logging

import datetime  # for block bot at night
from time import time  # for block update (1 minute) in timestamp

# python telegram bot's imports
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler
from telegram.ext.dispatcher import run_async

# for parse the Tablle rasp.tomsk.ru
import requests as r
from bs4 import BeautifulSoup as bs

from stops import stops  # list with the stops


# INITIALIZE
# initialize the logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# CONST
tz = datetime.timezone(datetime.timedelta(hours=7))  # timezone +7


@run_async
def help(bot, update):
    update.message.reply_text("–î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /bus <–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏>.", parse_mode="Markdown")


@run_async
def start(bot, update):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /bus <–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏>.",
                              parse_mode="Markdown")


@run_async
def bus(bot, update, args):
    if datetime.datetime.now(tz).time() > datetime.time(23, 00) or datetime.datetime.now(tz).time() < datetime.time(6, 00):
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–µ–π—á–∞—Å –Ω–µ —Ö–æ–¥–∏—Ç.\n"
                                  "–í—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –¢–æ–º—Å–∫–µ *—Å 6:00 –¥–æ 22:30*.",
                                  parse_mode="Markdown")
        taxi_ad(update)
        return

    if not args:
        update.message.reply_text("–î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /bus <–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏>.",
                                  parse_mode="Markdown")
        return
    args = ' '.join(args)

    if len(args) < 3:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ 3-–µ—Ö –±–∫—É–≤.",
                                  parse_mode="Markdown")
        return

    liststop, buttons = find_stop(args)

    if liststop == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
        update.message.reply_text("–û—Å—Ç–∞–Ω–æ–≤–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                                  parse_mode="Markdown")
    else:
        reply_markup = InlineKeyboardMarkup(buttons)
        update.message.reply_text('–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É:\n' + liststop + "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É.",
                                  reply_markup=reply_markup, parse_mode="Markdown")


@run_async
def button(bot, update):
    query = update.callback_query
    split = re.split(";", query.data)
    if time() - int(split[2]) > 60:
        text = ""
        bus = parse_time(split[0])
        text += '–û—Å—Ç–∞–Ω–æ–≤–∫–∞: `' + stops[int(split[1])]['value'] + '`\n\n'
        for b in bus:
            text += '–ù–æ–º–µ—Ä: ' + b + "\n"
            first = True
            for buses in bus[b]:
                if first:
                    text += '–ø—Ä–∏–µ–¥–µ—Ç —á–µ—Ä–µ–∑ ' + buses[1] + "\n"
                    first = False
                else:
                    text += '—Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ ' + buses[1] + "\n"
            text += '\n'

        split[2] = ''
        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=';'.join(split) + str(int(time())))]])
        bot.edit_message_text(text=text,
                              reply_markup=reply_markup,
                              chat_id=query.message.chat_id,
                              message_id=query.message.message_id,
                              parse_mode="Markdown")
    else:
        bot.answer_callback_query(update.callback_query.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ –æ–Ω–¥–æ–≥–æ —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É')


def find_stop(search):
    buttons = []  # list for all buttons
    liststop = ""
    buttonstr = []  # list for one str of buttons
    buttons_q = 0
    stopnum = 0
    for stop in stops:
        split = re.split("\(", stop['value'].lower())
        find = re.search(search.lower(), split[0])
        if find is None:
            stopnum += 1
            continue
        else:
            buttons_q += 1
            liststop += str(buttons_q) + ". `" + stop['value'] + "`\n"
            buttonstr.append(InlineKeyboardButton(str(buttons_q) + ". ", callback_data=stop['code'] + ';' + str(stopnum) + ';0'))
            if buttons_q % 7 == 0:
                buttons.append(buttonstr)
                buttonstr = []
        stopnum += 1
    if buttonstr:
        buttons.append(buttonstr)
    if buttons_q == 0:
        liststop = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
    return liststop, buttons


def parse_time(codestop):
    param = {
        '__EVENTVALIDATION': 'gzSSPkf24omwbE4k3zRVvYY+qef1mTyLMerkfhjel5dk1CIy9aOuqw5hsd4soGmKCXnNUN/GKFpXeJgSxmgkW7XokZEkoTzgaVftE9PPxmOOpxzcZ01W44hZPvgSraVNfAFTrN4p1ds+hme5DeS3JOoNchIlddI5w7v13qN28E2VhcSEFbf/5CbSQ7CbeTJ2dZ2LKkTsAXzCxSqj7owrMA==',
        '__VIEWSTATE': '2MXdsfbpxHxrNI46UCoOYltu7lnN6i8AczgENEarISmZ7xO7FfIGTOpq+hK9XlwI1UcKJcOO7Abha+6gzFfowbqewOdXPKo17ILJUFQLE7hcJcMTAVbZpPe6UszKh8palpBqZu1A2Tcn+v3ENWdAYK59VXKB5kv2WjHy+qfVVy5XGemZipUbr6kjn/CTh9zEcVN8+QDFwrVUrwHsR/4kw1QRaTTNY+wHR4yEBQ1J2gVPcqqPix6x7hEUH2QCVLFSGjkFMilmYNU6z7upg4k/XqDbjnRoowmXRU+VyNHQAZ0=',
        'OriginCode': codestop}
    glonass = r.post('http://service.glonass.tomsk.ru/tablo/', param)
    soup = bs(glonass.text, "html.parser")
    tablo = soup.find('table', {'id': 'Tablo'})
    routes = tablo.findAll('tr')[1:]
    buses = []
    bus = {}
    numbus = ""
    for ro in routes:
        i = False
        td = ro.findAll('td')
        for t in td:
            if 'rowspan' in t.attrs or re.match('[–ê–¢–ú]{1,2}\d+', t.text) is not None:
                if numbus != "":
                    bus.update({numbus: buses})
                    buses = []
                numbus = t.text
            else:
                if not i:
                    stop = t.text
                    i = True
                else:
                    buses.append([stop, t.text])
    bus.update({numbus: buses})
    return bus


def taxi_ad(update):
    update.message.reply_text("–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫—Å–∏.\n\n"
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥ Gett `GTYURJM` –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ 1500 —Ä—É–±–ª–µ–π –Ω–∞ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–µ–∑–¥–æ–∫ —Å –ª—É—á—à–∏–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏!\n"
                              "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥–∞—Ä–∫–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://goo.gl/NhhgvF –∏ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.\n"
                              "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.",
                              parse_mode="Markdown")


def error(bot, update, error):
    logging.warning('Update "%s" caused error "%s"' % (update, error))


updater = Updater("403179008:AAFONypWB4lrOeL7ciuFmQwf1cQ1NIsdXis")

updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(CommandHandler('bus', bus, pass_args=True))
updater.dispatcher.add_handler(CallbackQueryHandler(button))
updater.dispatcher.add_handler(CommandHandler('help', help))
updater.dispatcher.add_error_handler(error)

updater.start_polling()
