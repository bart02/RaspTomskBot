import datetime  # for block bot at night
from time import time  # for block update (1 minute) in timestamp

import logging

# python telegram bot's imports
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler
from telegram.ext.dispatcher import run_async

import api
from db import DB


# INITIALIZE
# initialize the logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# CONST
TZ = datetime.timezone(datetime.timedelta(hours=7))  # timezone +7

s = api.session()
db = DB('db.json')

@run_async
def help(bot, update):
    update.message.reply_text("–î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /bus <–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏>.", parse_mode="Markdown")


@run_async
def start(bot, update):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /bus <–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏>.",
                              parse_mode="Markdown")


@run_async
def bus(bot, update, args):
    if datetime.datetime.now(TZ).time() > datetime.time(23, 00) or datetime.datetime.now(TZ).time() < datetime.time(6, 00):
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–µ–π—á–∞—Å –Ω–µ —Ö–æ–¥–∏—Ç.\n"
                                  "–í—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤ –¢–æ–º—Å–∫–µ *—Å 6:00 –¥–æ 22:30*.",
                                  parse_mode="Markdown")
        taxi_ad(update)
        return

    if not args:
        update.message.reply_text("–î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ /bus <–Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏>.",
                                  parse_mode="Markdown")
        return
    args = ' '.join(args)

    if len(args) < 3:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ 3-–µ—Ö –±–∫—É–≤.",
                                  parse_mode="Markdown")
        return

    liststop, buttons = find_stop(args)

    if liststop:
        reply_markup = InlineKeyboardMarkup(buttons)
        update.message.reply_text('–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É:\n' + liststop + "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É.",
                                  reply_markup=reply_markup, parse_mode="Markdown")
    else:
        update.message.reply_text("–û—Å—Ç–∞–Ω–æ–≤–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                                  parse_mode="Markdown")


@run_async
def button(bot, update):
    info = update.callback_query
    if update.callback_query.data in db.db:
        query = db.db[info.data]
        if time() - query['time'] > 60:
            text = '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ `{}`\n\n'.format(query['name'])
            bus = s.get_stops_arrivals(query['ids'])
            # print(bus)
            for num, desc in bus.items():
                text += '–ê–≤—Ç–æ–±—É—Å: *{}*{} —Å–ª–µ–¥—É—é—â–∏–π –Ω–∞ `{}`\n'.format(num[0], num[1], desc['to'])
                for bus in desc['units']:
                    text += '{} {}\n'.format(bus['time'], '‚ôø' if bus['inv'] else '')
                text += '\n'

            query['time'] = time()

            reply_markup = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=db.append(query) )]])
            bot.edit_message_text(text=text,
                                  reply_markup=reply_markup,
                                  chat_id=info.message.chat_id,
                                  message_id=info.message.message_id,
                                  parse_mode="Markdown")

            db.delete(info.data)
        else:
            bot.answer_callback_query(update.callback_query.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ –æ–Ω–¥–æ–≥–æ —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É')
    else:
        info.message.edit_reply_markup()
        bot.answer_callback_query(info.id, text='–û—à–∏–±–∫–∞! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.')


def find_stop(search):
    buttons = []  # list for all buttons
    liststop = ""
    buttonstr = []  # list for one str of buttons
    buttons_q = 0
    stops = s.search_stop(search)
    for stop in stops:
        buttons_q += 1
        liststop += '{}. `{}`\n'.format(buttons_q, stop['st_title'])
        buttonstr.append(InlineKeyboardButton(str(buttons_q) + ". ", callback_data=db.append({'ids': stop['st_id'], 'name': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è', 'time': 0})))
        if buttons_q % 7 == 0:
            buttons.append(buttonstr)
            buttonstr = []
    if buttonstr:
        buttons.append(buttonstr)
    return liststop, buttons


def taxi_ad(update):
    update.message.reply_text("–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–∫—Å–∏.\n\n"
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ-–∫–æ–¥ Gett `GTYURJM` –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤ –ø–æ–¥–∞—Ä–æ–∫ –¥–æ 1500 —Ä—É–±–ª–µ–π –Ω–∞ –ø–µ—Ä–≤—ã–µ 10 –ø–æ–µ–∑–¥–æ–∫ —Å –ª—É—á—à–∏–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏!\n"
                              "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥–∞—Ä–∫–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://goo.gl/NhhgvF –∏ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.\n"
                              "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.",
                              parse_mode="Markdown")


def error(bot, update, error):
    logging.warning('Update "%s" caused error "%s"' % (update, error))


updater = Updater("403179008:AAFONypWB4lrOeL7ciuFmQwf1cQ1NIsdXis")

updater.dispatcher.add_handler(CommandHandler('start', start))
updater.dispatcher.add_handler(CommandHandler('help', help))
updater.dispatcher.add_handler(CommandHandler('bus', bus, pass_args=True))
updater.dispatcher.add_handler(CallbackQueryHandler(button))

updater.dispatcher.add_error_handler(error)

updater.start_polling()
